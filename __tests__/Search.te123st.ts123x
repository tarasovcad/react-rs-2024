import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { SearchContext } from '@/contexts/SearchContext';
import Search from '@/components/Search';

// Mock the useRouter hook
jest.mock('next/router', () => ({
  useRouter: () => ({
    push: jest.fn(),
  }),
}));

// Mock the UseLocalStorage hook
jest.mock('../hooks/useLocalStorage', () => ({
  __esModule: true,
  default: () => ['', jest.fn(), jest.fn()],
}));

describe('Search component', () => {
  const mockSetTerm = jest.fn();
  const mockSetCurrentPage = jest.fn();

  const renderComponent = () => {
    return render(
      <SearchContext.Provider value={{ setTerm: mockSetTerm, setCurrentPage: mockSetCurrentPage }}>
        <Search />
      </SearchContext.Provider>,
    );
  };

  it('renders the search input and button', () => {
    renderComponent();
    // search input
    expect(screen.getByPlaceholderText('Search character....')).toBeInTheDocument();
    // button
    expect(screen.getByRole('button')).toBeInTheDocument();
  });

  it('updates input value on change', () => {
    renderComponent();
    // get input
    const input = screen.getByPlaceholderText('Search character....') as HTMLInputElement;
    // update input value
    fireEvent.change(input, { target: { value: 'Rick' } });
    expect(input.value).toBe('Rick');
  });
  it('submits the form with correct data', () => {
    renderComponent();
    // get input
    const input = screen.getByPlaceholderText('Search character....') as HTMLInputElement;
    // get form
    const form = screen.getByRole('form');
    // update input value
    fireEvent.change(input, { target: { value: 'Morty' } });
    // submit form
    fireEvent.submit(form);

    expect(mockSetTerm).toHaveBeenCalledWith('Morty');
    expect(mockSetCurrentPage).toHaveBeenCalledWith(1);
  });
});
